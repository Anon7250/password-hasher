{"version":3,"sources":["components/VerifyPassword.js","containers/AddPassword.js","components/PasswordList.js","containers/App.js","serviceWorker.js","index.js"],"names":["VerifyPassword","props","React","useState","hasChecked","setHasChecked","btnTxt1","Row","Col","xs","lg","name","InputGroup","Form","Control","type","isInvalid","onChange","txt","Feedback","className","Button","variant","onClick","AddPassword","PasswordList","ListGroup","Item","salt","hash","hashMethod","Component","App","Container","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"+VAwCeA,EA/BQ,SAAAC,GAAU,IAAD,EACMC,IAAMC,UAAS,GADrB,mBACvBC,EADuB,KACXC,EADW,KAExBC,EAAUF,EAAa,SAAW,QAGxC,OACE,kBAACG,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAKC,GAAI,EAAGC,GAAI,GAAIT,EAAMU,MAC1B,kBAACH,EAAA,EAAD,CAAKC,GAAI,EAAGC,GAAI,GAAG,kBAACE,EAAA,EAAD,KACjB,kBAACC,EAAA,EAAKC,QAAN,CAAcC,KAAK,WAAWC,WAAW,EAAMC,SALjC,SAAAC,GAAG,OAAIb,GAAc,MAMnC,kBAACQ,EAAA,EAAKC,QAAQK,SAAd,CAAuBJ,KAAK,WAA5B,aAIF,kBAACP,EAAA,EAAD,CAAKC,GAAI,EAAGC,GAAI,EAAGU,UAAU,cAC3B,kBAACC,EAAA,EAAD,CAAQC,QAAQ,UAAUC,QAZb,kBAAMlB,GAAc,KAYeC,IAElD,kBAACE,EAAA,EAAD,CAAKC,GAAI,EAAGC,GAAI,EAAGU,UAAU,cAC3B,kBAACC,EAAA,EAAD,CAAQC,QAAQ,UAAhB,aCTOE,EAXK,WAClB,OACE,kBAACjB,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAKC,GAAI,EAAGC,GAAI,GAAG,kBAACG,EAAA,EAAKC,QAAN,OACnB,kBAACN,EAAA,EAAD,CAAKC,GAAI,EAAGC,GAAI,GAAG,kBAACG,EAAA,EAAKC,QAAN,CAAcC,KAAK,cACtC,kBAACP,EAAA,EAAD,CAAKC,GAAI,EAAGC,GAAI,EAAGU,UAAU,cAAa,kBAACC,EAAA,EAAD,CAAQC,QAAQ,WAAhB,QAC1C,kBAACd,EAAA,EAAD,CAAKC,GAAI,EAAGC,GAAI,EAAGU,UAAU,iBCsBpBK,E,uKAvBX,OACE,kBAACC,EAAA,EAAD,KACE,kBAACA,EAAA,EAAUC,KAAX,KACE,kBAACpB,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAKC,GAAI,EAAGC,GAAI,GAAhB,QACA,kBAACF,EAAA,EAAD,CAAKC,GAAI,EAAGC,GAAI,GAAhB,YACA,kBAACF,EAAA,EAAD,CAAKC,GAAI,EAAGC,GAAI,EAAGU,UAAU,cAA7B,aAGJ,kBAACM,EAAA,EAAUC,KAAX,KAAgB,kBAAC,EAAD,OAChB,kBAACD,EAAA,EAAUC,KAAX,KACE,kBAAC,EAAD,CAAgBhB,KAAK,UAAUiB,KAAK,uCAAuCC,KAAK,OAAOC,WAAW,kBAEpG,kBAACJ,EAAA,EAAUC,KAAX,KACE,kBAAC,EAAD,CAAgBhB,KAAK,SAASiB,KAAK,uCAAuCC,KAAK,OAAOC,WAAW,kBAEnG,kBAACJ,EAAA,EAAUC,KAAX,KAAgB,kBAAC,EAAD,OAChB,kBAACD,EAAA,EAAUC,KAAX,KAAgB,kBAAC,EAAD,Y,GAnBGzB,IAAM6B,WCWlBC,G,6KAVX,OACE,kBAACC,EAAA,EAAD,KACE,kBAAC1B,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,KAAK,kBAAC,EAAD,a,GALGN,IAAM6B,YCGJG,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.38ec6fda.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport Button from 'react-bootstrap/Button';\nimport Col from 'react-bootstrap/Col';\nimport Form from 'react-bootstrap/Form';\nimport InputGroup from 'react-bootstrap/InputGroup';\nimport Row from 'react-bootstrap/Row';\n\nconst VerifyPassword = props => {\n  const [hasChecked, setHasChecked] = React.useState(false);\n  const btnTxt1 = hasChecked ? \"More..\" : \"Check\";\n  const btnAction1 = () => setHasChecked(true);\n  const psswdAction = txt => setHasChecked(false);\n  return (\n    <Row>\n      <Col xs={3} lg={4}>{props.name}</Col>\n      <Col xs={3} lg={4}><InputGroup>\n        <Form.Control type=\"password\" isInvalid={true} onChange={psswdAction}/>\n        <Form.Control.Feedback type=\"invalid\">\n          Testing\n        </Form.Control.Feedback>\n      </InputGroup></Col>\n      <Col xs={3} lg={2} className=\"action-col\">\n        <Button variant=\"primary\" onClick={btnAction1}>{btnTxt1}</Button>\n      </Col>\n      <Col xs={3} lg={2} className=\"action-col\">\n        <Button variant=\"danger\">Delete</Button>\n      </Col>\n    </Row>\n  );\n}\n\nVerifyPassword.propTypes = {\n  name: PropTypes.string.isRequired,\n  salt: PropTypes.string.isRequired,\n  hash: PropTypes.string.isRequired,\n  hashMethod: PropTypes.string.isRequired,\n}\n\nexport default VerifyPassword;\n","import React from 'react';\n\nimport Button from 'react-bootstrap/Button';\nimport Col from 'react-bootstrap/Col';\nimport Form from 'react-bootstrap/Form';\nimport Row from 'react-bootstrap/Row';\n\nconst AddPassword = () => {\n  return (\n    <Row>\n      <Col xs={3} lg={4}><Form.Control/></Col>\n      <Col xs={3} lg={4}><Form.Control type=\"password\"/></Col>\n      <Col xs={3} lg={2} className=\"action-col\"><Button variant=\"primary\">Add</Button></Col>\n      <Col xs={3} lg={2} className=\"action-col\"></Col>\n    </Row>\n  );\n}\n\nexport default AddPassword;\n","import React from 'react';\n\nimport Col from 'react-bootstrap/Col';\nimport ListGroup from 'react-bootstrap/ListGroup';\nimport Row from 'react-bootstrap/Row';\n\nimport './PasswordList.css';\nimport VerifyPassword from './VerifyPassword.js';\nimport AddPassword from '../containers/AddPassword.js';\n\nclass PasswordList extends React.Component {\n  render() {\n    return (\n      <ListGroup>\n        <ListGroup.Item>\n          <Row>\n            <Col xs={3} lg={4}>Name</Col>\n            <Col xs={3} lg={4}>Password</Col>\n            <Col xs={6} lg={4} className=\"action-col\">Actions</Col>\n          </Row>\n        </ListGroup.Item>\n        <ListGroup.Item><AddPassword /></ListGroup.Item>\n        <ListGroup.Item>\n          <VerifyPassword name=\"test123\" salt=\"8826aa59-4133-4074-a904-c9be256be784\" hash=\"3c1c\" hashMethod=\"sha512;last4\"/>\n        </ListGroup.Item>\n        <ListGroup.Item>\n          <VerifyPassword name=\"abc000\" salt=\"2644047a-eca9-4858-8282-048480983051\" hash=\"a02d\" hashMethod=\"sha512;last4\"/>\n        </ListGroup.Item>\n        <ListGroup.Item><VerifyPassword /></ListGroup.Item>\n        <ListGroup.Item><VerifyPassword /></ListGroup.Item>\n      </ListGroup>\n    );\n  }\n}\n\nexport default PasswordList;\n","import React from 'react';\n\nimport Container from 'react-bootstrap/Container';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\n\nimport PasswordList from '../components/PasswordList.js';\nimport './App.css';\n\nclass App extends React.Component {\n  render() {\n    return (\n      <Container>\n        <Row>\n          <Col><PasswordList/></Col>\n        </Row>\n      </Container>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}