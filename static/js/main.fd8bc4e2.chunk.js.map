{"version":3,"sources":["containers/ErrorDialog.js","actions/index.js","lib/hasher.js","containers/DeletePassword.js","store/index.js","components/VerifyPassword.js","containers/AddPassword.js","components/PasswordList.js","containers/App.js","reducers/passwordList.js","reducers/index.js","reducers/errors.js","serviceWorker.js","index.js"],"names":["ErrorDialog","props","sendClose","dispatch","type","Modal","show","showError","onHide","className","Header","closeButton","Body","errorMsg","Footer","Button","onClick","connect","state","errors","showDialog","msg","toHash","hashMethod","salt","password","Error","hash","str","hasher","createHash","update","toString","digest","_rawSha512","slice","length","DeletePassword","variant","name","window","localStorage","removeItem","rmPassword","VerifyPassword","React","useState","hasChecked","setHasChecked","pass","setPass","passOk","btnTxt","btnAction","Row","Col","xs","lg","InputGroup","Form","Control","data-testid","value","isInvalid","isValid","onChange","event","target","onKeyPress","key","Feedback","AddPassword","ref","x","item","uuid","v4","allPasswords","some","setItem","JSON","stringify","addPassword","passwordList","list","getColorStyle","hashStr","hashVal","parseInt","color","repeat","backgroundColor","boxShadow","PasswordList","verifyPasswords","content","map","ListGroup","Item","style","contentLoaded","loaded","maybePasswordList","setTimeout","storage","ans","i","indexOf","getItem","push","parse","getPasswords","Container","action","filter","combineReducers","Boolean","location","hostname","match","ReactDOM","render","StrictMode","store","createStore","rootReducer","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.fd8bc4e2.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\n\nimport Button from 'react-bootstrap/Button';\nimport Modal from 'react-bootstrap/Modal';\n\nimport { dismissError } from '../actions';\nimport './ErrorDialog.css';\n\nconst ErrorDialog = props => {\n  const sendClose = () => props.dispatch(dismissError());\n  return (\n    <Modal show={props.showError} onHide={sendClose} className=\"error-modal\">\n      <Modal.Header closeButton>Error Message</Modal.Header>\n      <Modal.Body>\n        <pre>{props.errorMsg}</pre>\n      </Modal.Body>\n      <Modal.Footer>\n        <Button onClick={sendClose}>Dismiss</Button>\n      </Modal.Footer>\n    </Modal>\n  )\n};\n\nErrorDialog.propTypes = {\n  showError: PropTypes.bool.isRequired,\n  errorMsg: PropTypes.string.isRequired,\n}\n\nconst mapStateToProps = (state, props) => ({\n  showError: state.errors.showDialog,\n  errorMsg: state.errors.msg,\n});\n\nexport const ErrorDialogTestable = ErrorDialog;\nexport default connect(mapStateToProps)(ErrorDialog);\n","export const addPassword = (name, salt, hash, hashMethod=\"sha512;last4\") => ({\n  type: 'ADD_PASSWORD',\n  name,\n  salt,\n  hash,\n  hashMethod,\n})\n\nexport const rmPassword = (name) => ({\n  type: 'RM_PASSWORD',\n  name,\n})\n\nexport const loadPasswords = content => ({type: 'LOAD_PASSWORDS', list: content})\n\nexport const dismissError = () => ({type: 'DISMISS_ERROR'})\nexport const showError = (msg) => ({type: 'SHOW_ERROR', msg})\n","import {createHash} from 'crypto';\n\nexport const _rawSha512 = str => {\n  const hasher = createHash('sha512');\n  hasher.update(str.toString());\n  return hasher.digest('hex').toString();\n};\n\nexport const toHash = (hashMethod, salt, password) => {\n  if (hashMethod !== 'sha512;last4') \n    throw new Error(`Unsupported hash method: ${hashMethod}`);\n\n  const hash = _rawSha512(salt.toString() + password.toString());\n  return hash.slice(hash.length - 4);\n}\n","import React from 'react';\nimport {connect} from 'react-redux';\n\nimport Button from 'react-bootstrap/Button';\n\nimport {rmPassword} from '../actions';\nimport {clearPassword} from '../store';\n\nconst DeletePassword = props => {\n  const btnAction = () => {\n    clearPassword(props.name);\n    props.dispatch(rmPassword(props.name));\n  }\n  return (\n    <Button variant=\"danger\" onClick={btnAction}>Delete</Button>\n  );\n}\n\nexport const DeletePasswordTestable = DeletePassword;\nexport default connect()(DeletePassword);\n","export const updatePassword = item => {\n  if (window && window.localStorage) {\n    window.localStorage.setItem(`passwordv1-${item.name}`, JSON.stringify(item));\n  }\n};\n\nexport const getPasswords = () => {\n  let storage = window && window.localStorage;\n  if (!storage) return;\n\n  let ans = [];\n  for (let i = 0; i < storage.length; i ++) {\n    let key = storage.key(i);\n    if (key.indexOf(\"passwordv1-\") !== 0) continue;\n\n    let item = storage.getItem(key);\n    ans.push(JSON.parse(item));\n  }\n  return ans\n}\n\nexport const clearPassword = name => {\n  if (window && window.localStorage) {\n    window.localStorage.removeItem(`passwordv1-${name}`);\n  }\n}\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport Button from 'react-bootstrap/Button';\nimport Col from 'react-bootstrap/Col';\nimport Form from 'react-bootstrap/Form';\nimport InputGroup from 'react-bootstrap/InputGroup';\nimport Row from 'react-bootstrap/Row';\n\nimport {toHash} from '../lib/hasher.js';\nimport DeletePassword from '../containers/DeletePassword.js';\n\nconst VerifyPassword = props => {\n  const [hasChecked, setHasChecked] = React.useState(false);\n  const [pass, setPass] = React.useState(\"\");\n  const passOk = toHash(props.hashMethod, props.salt, pass) === props.hash;\n  const btnTxt = hasChecked ? \"More..\" : \"Check\";\n  const btnAction = () => setHasChecked(true);\n  const editAction = event => {\n    setHasChecked(false);\n    setPass(event.target.value);\n  };\n  const keyAction = event => event.key === \"Enter\" && btnAction();\n  return (\n    <Row>\n      <Col xs={3} lg={4}>{props.name}</Col>\n      <Col xs={3} lg={4}><InputGroup>\n        <Form.Control \n          data-testid=\"verify-password:input\"\n          value={pass}\n          type=\"password\" \n          isInvalid={hasChecked && !passOk} \n          isValid={hasChecked && passOk}\n          onChange={editAction} \n          onKeyPress={keyAction}/>\n        <Form.Control.Feedback type=\"invalid\">\n          Wrong Password\n        </Form.Control.Feedback>\n      </InputGroup></Col>\n      <Col xs={3} lg={2} className=\"action-col\">\n        <Button variant=\"primary\" onClick={btnAction}>{btnTxt}</Button>\n      </Col>\n      <Col xs={3} lg={2} className=\"action-col\">\n        <DeletePassword name={props.name}/>\n      </Col>\n    </Row>\n  );\n}\n\nVerifyPassword.propTypes = {\n  name: PropTypes.string.isRequired,\n  salt: PropTypes.string.isRequired,\n  hash: PropTypes.string.isRequired,\n  hashMethod: PropTypes.string.isRequired,\n}\n\nexport default VerifyPassword;\n","import React from 'react';\nimport {connect} from 'react-redux';\n\nimport Button from 'react-bootstrap/Button';\nimport Col from 'react-bootstrap/Col';\nimport Form from 'react-bootstrap/Form';\nimport Row from 'react-bootstrap/Row';\nimport uuid from 'uuid';\n\nimport {addPassword, showError} from '../actions';\nimport {toHash} from '../lib/hasher.js';\nimport {updatePassword} from '../store';\n\nconst AddPassword = props => {\n  let name;\n  let password;\n  const btnAction = () => {\n    let hashMethod = \"sha512;last4\"\n    let salt = uuid.v4().toString();\n    let hash = toHash(hashMethod, salt, password.value);\n    let allPasswords = props.allPasswords || [];\n    if (allPasswords.some(x => x.name === name.value)) {\n      return props.dispatch(showError(\n        `There is already a password named \"${name.value}\". Please use a different name.`\n      ));\n    }\n    updatePassword({name: name.value, salt: salt, hash: hash, hashMethod: hashMethod})\n    props.dispatch(addPassword(name.value, salt, hash));\n  }\n  return (\n    <Row>\n      <Col xs={3} lg={4}><Form.Control ref={x => name=x}/></Col>\n      <Col xs={3} lg={4}><Form.Control type=\"password\" ref={x => password=x}/></Col>\n      <Col xs={3} lg={2} className=\"action-col\">\n        <Button variant=\"primary\" onClick={btnAction}>Add</Button>\n      </Col>\n      <Col xs={3} lg={2} className=\"action-col\"></Col>\n    </Row>\n  );\n}\n\nconst mapStateToProps = (state, props) => ({\n  allPasswords: state.passwordList.list,\n});\n\nexport const AddPasswordTestable = AddPassword;\nexport default connect(mapStateToProps)(AddPassword);\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport Col from 'react-bootstrap/Col';\nimport ListGroup from 'react-bootstrap/ListGroup';\nimport Row from 'react-bootstrap/Row';\n\nimport './PasswordList.css';\nimport VerifyPassword from './VerifyPassword.js';\nimport AddPassword from '../containers/AddPassword.js';\n\nexport const getColorStyle = hashStr => {\n  const hashVal = parseInt(hashStr, 16);\n  var color = (\n    (((hashVal & 0xf000) * (hashVal & 0xf)) << 4) |\n    ((hashVal & 0xf00) * (hashVal & 0xf)) |\n    (((hashVal & 0xf0) * (hashVal & 0xf)) >> 4)\n  ).toString(16);\n  if (color.length < 6) {\n    color = '0'.repeat(6 - color.length) + color;\n  }\n\n  const colorIntensity = (\n    (((hashVal & 0xf000) * (hashVal & 0xf)) >> 12) +\n    (((hashVal & 0xf00) * (hashVal & 0xf)) >> 8) +\n    (((hashVal & 0xf0) * (hashVal & 0xf)) >> 4)\n  ) / 3;\n  const textColor = colorIntensity > 128 ? \"black\" : \"white\";\n  return {\n    color: textColor,\n    backgroundColor: `#${color}a0`,\n    boxShadow: `0.3em 0.1em #${color}50`,\n  };\n};\n\nconst PasswordList = props => {\n  const verifyPasswords = props.content.map(item => {\n    return (\n      <ListGroup.Item key={item.name} style={getColorStyle(item.hash)}>\n        <VerifyPassword name={item.name} salt={item.salt} hash={item.hash} hashMethod={item.hashMethod}/>\n      </ListGroup.Item>\n    )\n  });\n  return (\n    <ListGroup data-testid=\"password-list\">\n      <ListGroup.Item>\n        <Row>\n          <Col xs={3} lg={4}>Name</Col>\n          <Col xs={3} lg={4}>Password</Col>\n          <Col xs={6} lg={4} className=\"action-col\">Actions</Col>\n        </Row>\n      </ListGroup.Item>\n      <ListGroup.Item><AddPassword /></ListGroup.Item>\n      {verifyPasswords}\n    </ListGroup>\n  );\n}\n\nPasswordList.propTypes = {\n  content: PropTypes.arrayOf(PropTypes.shape({\n    name: PropTypes.string.isRequired,\n    onDelete: PropTypes.func,\n    hash: PropTypes.string.isRequired,\n    hashMethod: PropTypes.string.isRequired,\n    salt: PropTypes.string.isRequired,\n  })).isRequired,\n  onAddPassword: PropTypes.func,\n};\n\nexport default PasswordList;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport {connect} from 'react-redux';\n\nimport Container from 'react-bootstrap/Container';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\n\nimport ErrorDialog from './ErrorDialog.js';\nimport {loadPasswords} from '../actions';\nimport {getPasswords} from '../store';\nimport PasswordList from '../components/PasswordList.js';\nimport './App.css';\n\nconst App = props => {\n  var maybePasswordList = (<PasswordList content={props.content}/>);\n  if (!props.contentLoaded) {\n    setTimeout(() => props.dispatch(loadPasswords(getPasswords())), 500);\n    maybePasswordList = (<pre>Loading...</pre>);\n  }\n  return (\n    <Container>\n      <Row>\n        <Col>\n          {maybePasswordList}\n        </Col>\n      </Row>\n      <ErrorDialog />\n    </Container>\n  );\n}\n\nApp.propTypes = {\n  content: PropTypes.arrayOf(PropTypes.shape({\n    name: PropTypes.string.isRequired,\n    salt: PropTypes.string.isRequired,\n    hash: PropTypes.string.isRequired,\n    hashMethod: PropTypes.string.isRequired,\n  }).isRequired).isRequired,\n}\n\nconst mapStateToProps = (state, props) => ({\n  content: state.passwordList.list,\n  contentLoaded: state.passwordList.loaded,\n})\n\nexport default connect(mapStateToProps)(App);\n","const passwordList = (state = {list: [], loaded: false}, action) => {\n  switch(action.type) {\n    case 'ADD_PASSWORD':\n      if (state.list.some(x => x.name === action.name)) {\n        throw new Error('Programmer forgot to check duplicate name: ' + action.name);\n      }\n      return {...state, list: [action, ...state.list]}\n    case 'RM_PASSWORD':\n      return {...state, list: state.list.filter(x => x.name !== action.name)}\n    case 'LOAD_PASSWORDS':\n      return {...state, list: action.list, loaded: true}\n    default:\n      return state\n  }\n}\n\nexport default passwordList;\n","import { combineReducers } from 'redux'\nimport passwordList from './passwordList'\nimport errors from './errors'\n\nexport default combineReducers({\n  passwordList,\n  errors,\n})\n","export default (state = {showDialog: false, msg: \"\"}, action) => {\n  switch(action.type) {\n    case 'DISMISS_ERROR':\n      return {...state, showDialog: false}\n    case 'SHOW_ERROR':\n      return {showDialog: true, msg: action.msg.toString()};\n    default:\n      return state\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { createStore } from 'redux';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nimport App from './containers/App';\nimport rootReducer from './reducers';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={createStore(rootReducer)}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}